/*
 * Candy Server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package goo

import (
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
	"strconv"
)

func getPrice(candy string) (price int32, err error) {
	if candy == "CE" {
		price = 10
	} else if candy == "AA" {
		price = 15
	} else if candy == "NT" {
		price = 17
	} else if candy == "DE" {
		price = 21
	} else if candy == "YR" {
		price = 23
	} else {
		return 0, errors.New("ERROR")
	}
	return price, nil
}

func BuyCandy(w http.ResponseWriter, r *http.Request) {
	var order Order
	var response interface{}
	if r.Method == http.MethodPost {
		err := json.NewDecoder(r.Body).Decode(&order)
		if err != nil {
			log.Fatalln(err)
			http.Error(w, err.Error(), http.StatusInternalServerError)
		}
		price, err := getPrice(order.CandyType)
		if err != nil {
			response = InlineResponse400{"400: The candy " + order.CandyType + " is wrong!"}
			w.WriteHeader(http.StatusBadRequest)
		} else if order.CandyCount < 1 {
			response = InlineResponse400{"400: The candy count " + strconv.Itoa(int(order.CandyCount)) + " is wrong!"}
			w.WriteHeader(http.StatusBadRequest)
		} else if order.Money < 0 {
			response = InlineResponse400{"400: The money " + strconv.Itoa(int(order.Money)) + " is wrong!"}
			w.WriteHeader(http.StatusBadRequest)
		} else {
			change := order.Money - price*order.CandyCount
			if change >= 0 {
				response = InlineResponse201{change, askCow("Thanks")}
				w.WriteHeader(http.StatusCreated)
			} else {
				response = InlineResponse402{"402: You need " + strconv.Itoa(int(change*-1)) + " more money!"}
				w.WriteHeader(http.StatusPaymentRequired)
			}
		}
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		json.NewEncoder(w).Encode(&response)
		fmt.Printf("response: %v\n", response)
	} else {
		http.Error(w, "Invalid Method", http.StatusMethodNotAllowed)
	}
}
